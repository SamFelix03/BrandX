// Updated bounty interfaces to support the new response format with metric impacts

export interface MetricImpacts {
  [metricName: string]: number; // e.g., "complaint_resolution_effectiveness": 7
}

export interface BountyWithImpacts {
  title: string;
  description: string;
  category: string;
  difficulty: string;
  estimated_reward: string; // e.g., "250 points" or "300 points + product discount"
  target_audience: string;
  success_metrics: string[];
  metric_impacts: MetricImpacts;
  impact_users: number;
}

export interface BrandBountyResponse {
  success: boolean;
  brand_name: string;
  bounties: BountyWithImpacts[];
  analysis_summary: string;
  timestamp: string;
  agent_address: string;
}

export interface AutoGeneratedBountiesResponse {
  success: boolean;
  auto_generated_bounties: {
    [brandName: string]: BrandBountyResponse;
  };
  total_brands_with_bounties: number;
  timestamp: string;
  agent_address: string;
  error: string | null;
}

// Extended brand analysis data interface
export interface BrandAnalysisDataWithImpacts {
  id: string;
  business_id: string;
  brand_name: string;
  web_search_result: string;
  negative_reviews_result: string;
  positive_reviews_result: string;
  negative_reddit_result: string;
  positive_reddit_result: string;
  negative_social_result: string;
  positive_social_result: string;
  metrics_result: any;
  bounty_suggestions: BrandBountyResponse; // Now contains the full structure with impacts
  analysis_timestamp: string;
  kg_storage_status: string;
  raw_response: any;
  created_at: string;
  updated_at: string;
}

// Helper type for calculating total metric impacts from selected bounties
export interface MetricImpactsSummary {
  [metricName: string]: number;
}